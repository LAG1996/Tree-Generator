export const nodeSet = [
	1,
	1,	
		5,
			5,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
			5,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
			5,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
			5,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
			5,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
				5, 
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
					5,
							0,
							0,
							0,
							0,
							0,
];

export const branchRule = (parent, origin) => {
	const dirs = [
		new THREE.Vector3(0, 1, 0),
		new THREE.Vector3(1, 0, 0),
		new THREE.Vector3(-1, 0, 0),
		new THREE.Vector3(0, 0, 1),
		new THREE.Vector3(0, 0, -1),
	]

	let nextDir = dirs[parent.children.length];

	if (!parent.parent) {
		nextDir = nextDir.multiplyScalar(10);
		return [ parent.position[0] + nextDir.x, parent.position[1] + nextDir.y, parent.position[2] + nextDir.z ];
	}


	const diffVector = new THREE.Vector3().subVectors(
		new THREE.Vector3(parent.position[0], parent.position[1], parent.position[2]),
		new THREE.Vector3(parent.parent.position[0], parent.parent.position[1], parent.parent.position[2]),
	);

	const q = new THREE.Quaternion().setFromUnitVectors(dirs[0].normalize(), diffVector.clone().normalize());
	nextDir.applyQuaternion(q);

	nextDir = nextDir.multiplyScalar(diffVector.distanceTo(new THREE.Vector3(0, 0, 0)) * Math.pow(0.75, parent.depth - 1));

	return [ parent.position[0] + nextDir.x, parent.position[1] + nextDir.y, parent.position[2] + nextDir.z];
}